
Seven-segmentIndicator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000002da  0000036e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006a  0080006a  00000378  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000080f  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000640  00000000  00000000  00000c53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000039d  00000000  00000000  00001293  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001630  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c6  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000313  00000000  00000000  00001af6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001e09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 21 01 	call	0x242	; 0x242 <main>
  8a:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SPI_init>:
/* Коды символов для 7-сегментных индикаторов */
unsigned char symbol_codes[]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};

void SPI_init()
{
	DDRB|=(7<<0)|(1<<4);  /* Управление линиями выбора микросхем */
  92:	87 b3       	in	r24, 0x17	; 23
  94:	87 61       	ori	r24, 0x17	; 23
  96:	87 bb       	out	0x17, r24	; 23
	DDRB|=(1<<5)|(1<<7);  /* Управление линиями SPI */
  98:	87 b3       	in	r24, 0x17	; 23
  9a:	80 6a       	ori	r24, 0xA0	; 160
  9c:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  9e:	81 e5       	ldi	r24, 0x51	; 81
  a0:	8d b9       	out	0x0d, r24	; 13
  a2:	08 95       	ret

000000a4 <SPI_WR>:
}

unsigned char SPI_WR(unsigned char data)
{
	unsigned char tmp;
	SPDR = data;
  a4:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)))
  a6:	01 c0       	rjmp	.+2      	; 0xaa <SPI_WR+0x6>
	tmp=SPDR;
  a8:	9f b1       	in	r25, 0x0f	; 15

unsigned char SPI_WR(unsigned char data)
{
	unsigned char tmp;
	SPDR = data;
	while(!(SPSR & (1<<SPIF)))
  aa:	77 9b       	sbis	0x0e, 7	; 14
  ac:	fd cf       	rjmp	.-6      	; 0xa8 <SPI_WR+0x4>
	tmp=SPDR;
	return tmp;
}
  ae:	89 2f       	mov	r24, r25
  b0:	08 95       	ret

000000b2 <send_digit>:

void send_digit(unsigned char value,unsigned char pos)
{
  b2:	cf 93       	push	r28
  b4:	c6 2f       	mov	r28, r22
	SPI_WR(symbol_codes[value]); // на все микросхемы отправлен один и тот же код, но записан он будет только в ту микросхему, на которую будет отправлен бит записи
  b6:	e8 2f       	mov	r30, r24
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	e0 5a       	subi	r30, 0xA0	; 160
  bc:	ff 4f       	sbci	r31, 0xFF	; 255
  be:	80 81       	ld	r24, Z
  c0:	0e 94 52 00 	call	0xa4	; 0xa4 <SPI_WR>
	switch(pos)
  c4:	c2 30       	cpi	r28, 0x02	; 2
  c6:	59 f0       	breq	.+22     	; 0xde <send_digit+0x2c>
  c8:	c3 30       	cpi	r28, 0x03	; 3
  ca:	81 f0       	breq	.+32     	; 0xec <send_digit+0x3a>
  cc:	c1 30       	cpi	r28, 0x01	; 1
  ce:	a1 f4       	brne	.+40     	; 0xf8 <send_digit+0x46>
	{
		case 1:	ST1SET; ST1RES; break;
  d0:	88 b3       	in	r24, 0x18	; 24
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	88 bb       	out	0x18, r24	; 24
  d6:	88 b3       	in	r24, 0x18	; 24
  d8:	8e 7f       	andi	r24, 0xFE	; 254
  da:	88 bb       	out	0x18, r24	; 24
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <send_digit+0x46>
		case 2:	ST2SET;	ST2RES;	break;
  de:	88 b3       	in	r24, 0x18	; 24
  e0:	82 60       	ori	r24, 0x02	; 2
  e2:	88 bb       	out	0x18, r24	; 24
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	8d 7f       	andi	r24, 0xFD	; 253
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	06 c0       	rjmp	.+12     	; 0xf8 <send_digit+0x46>
		case 3:	ST3SET;	ST3RES;	break;
  ec:	88 b3       	in	r24, 0x18	; 24
  ee:	84 60       	ori	r24, 0x04	; 4
  f0:	88 bb       	out	0x18, r24	; 24
  f2:	88 b3       	in	r24, 0x18	; 24
  f4:	8b 7f       	andi	r24, 0xFB	; 251
  f6:	88 bb       	out	0x18, r24	; 24
	}
}
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <ASK_btns>:

unsigned char ASK_btns(void)
{
	unsigned char btns;
	SENRES;
  fc:	88 b3       	in	r24, 0x18	; 24
  fe:	8f 7e       	andi	r24, 0xEF	; 239
 100:	88 bb       	out	0x18, r24	; 24
	SENSET;
 102:	88 b3       	in	r24, 0x18	; 24
 104:	80 61       	ori	r24, 0x10	; 16
 106:	88 bb       	out	0x18, r24	; 24
	btns=SPI_WR(0);
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0e 94 52 00 	call	0xa4	; 0xa4 <SPI_WR>
	return btns;
}
 10e:	08 95       	ret

00000110 <display_number>:

void display_number(int number) {
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	fc 01       	movw	r30, r24
	unsigned char hundreds = (number / 100) % 10; // Сотни
 116:	64 e6       	ldi	r22, 0x64	; 100
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	0e 94 43 01 	call	0x286	; 0x286 <__divmodhi4>
 11e:	cb 01       	movw	r24, r22
 120:	2a e0       	ldi	r18, 0x0A	; 10
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	b9 01       	movw	r22, r18
 126:	0e 94 43 01 	call	0x286	; 0x286 <__divmodhi4>
 12a:	48 2f       	mov	r20, r24
	unsigned char tens = (number / 10) % 10;      // Десятки
 12c:	cf 01       	movw	r24, r30
 12e:	b9 01       	movw	r22, r18
 130:	0e 94 43 01 	call	0x286	; 0x286 <__divmodhi4>
 134:	c8 2f       	mov	r28, r24
 136:	cb 01       	movw	r24, r22
 138:	b9 01       	movw	r22, r18
 13a:	0e 94 43 01 	call	0x286	; 0x286 <__divmodhi4>
 13e:	d8 2f       	mov	r29, r24
	unsigned char units = number % 10;       // Единицы

	send_digit(hundreds, 1); // Вывод на первый индикатор
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	84 2f       	mov	r24, r20
 144:	0e 94 59 00 	call	0xb2	; 0xb2 <send_digit>
	send_digit(tens, 2);     // Вывод на второй индикатор
 148:	62 e0       	ldi	r22, 0x02	; 2
 14a:	8d 2f       	mov	r24, r29
 14c:	0e 94 59 00 	call	0xb2	; 0xb2 <send_digit>
	send_digit(units, 3);    // Вывод на третий индикатор
 150:	63 e0       	ldi	r22, 0x03	; 3
 152:	8c 2f       	mov	r24, r28
 154:	0e 94 59 00 	call	0xb2	; 0xb2 <send_digit>
}
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <init_INT1>:

void init_INT1(void) {
	DDRD &= ~(1<<PIN_INT1);// Настроим вывод на вход
 15e:	81 b3       	in	r24, 0x11	; 17
 160:	87 7f       	andi	r24, 0xF7	; 247
 162:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<PIN_INT1);// Включаем подтягивающий резистор
 164:	82 b3       	in	r24, 0x12	; 18
 166:	88 60       	ori	r24, 0x08	; 8
 168:	82 bb       	out	0x12, r24	; 18
	GICR |= (1<<INT1);// Разрешаем внешнее прерывание на INT1
 16a:	8b b7       	in	r24, 0x3b	; 59
 16c:	80 68       	ori	r24, 0x80	; 128
 16e:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1<<ISC01)|(0<<ISC00);// Настроим условие прерывания
 170:	85 b7       	in	r24, 0x35	; 53
 172:	82 60       	ori	r24, 0x02	; 2
 174:	85 bf       	out	0x35, r24	; 53
	sei(); // Включаем глобальные прерывания
 176:	78 94       	sei
 178:	08 95       	ret

0000017a <configure_neg_indicator>:
}

void configure_neg_indicator() {
	DDRD |= (1 << LED_NEG); // PD0 как выход для индикатора отрицательного числа
 17a:	81 b3       	in	r24, 0x11	; 17
 17c:	81 60       	ori	r24, 0x01	; 1
 17e:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1 << LED_NEG); // Гасим лампочку по умолчанию (активный уровень — низкий)
 180:	82 b3       	in	r24, 0x12	; 18
 182:	81 60       	ori	r24, 0x01	; 1
 184:	82 bb       	out	0x12, r24	; 18
 186:	08 95       	ret

00000188 <__vector_2>:
}

// Обработчик прерывания для INT1
ISR(INT1_vect) {
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	2f 93       	push	r18
 194:	3f 93       	push	r19
 196:	4f 93       	push	r20
 198:	5f 93       	push	r21
 19a:	6f 93       	push	r22
 19c:	7f 93       	push	r23
 19e:	8f 93       	push	r24
 1a0:	9f 93       	push	r25
 1a2:	af 93       	push	r26
 1a4:	bf 93       	push	r27
 1a6:	ef 93       	push	r30
 1a8:	ff 93       	push	r31
	buttons = ASK_btns();
 1aa:	0e 94 7e 00 	call	0xfc	; 0xfc <ASK_btns>
 1ae:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
	
	// Разделяем число на два 4-битных числа
	unsigned char num1 = (buttons >> 4) & 0x0F; // Первое число (старшие 4 бита)
 1b2:	28 2f       	mov	r18, r24
 1b4:	22 95       	swap	r18
 1b6:	2f 70       	andi	r18, 0x0F	; 15
	unsigned char num2 = buttons & 0x0F;       // Второе число (младшие 4 бита)
 1b8:	68 2f       	mov	r22, r24
 1ba:	6f 70       	andi	r22, 0x0F	; 15
	int result = 0;

	// Выполнение математической операции в зависимости от нажатой кнопки
	if (!(PINA & (1 << PA0))) {
 1bc:	c8 99       	sbic	0x19, 0	; 25
 1be:	05 c0       	rjmp	.+10     	; 0x1ca <__vector_2+0x42>
		result = num1 + num2; // Сложение
 1c0:	86 2f       	mov	r24, r22
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	82 0f       	add	r24, r18
 1c6:	91 1d       	adc	r25, r1
 1c8:	1b c0       	rjmp	.+54     	; 0x200 <__EEPROM_REGION_LENGTH__>
		} else if (!(PINA & (1 << PA1))) {
 1ca:	c9 99       	sbic	0x19, 1	; 25
 1cc:	05 c0       	rjmp	.+10     	; 0x1d8 <__vector_2+0x50>
		result = num1 - num2; // Вычитание
 1ce:	82 2f       	mov	r24, r18
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	86 1b       	sub	r24, r22
 1d4:	91 09       	sbc	r25, r1
 1d6:	14 c0       	rjmp	.+40     	; 0x200 <__EEPROM_REGION_LENGTH__>
		} else if (!(PINA & (1 << PA2))) {
 1d8:	ca 99       	sbic	0x19, 2	; 25
 1da:	04 c0       	rjmp	.+8      	; 0x1e4 <__vector_2+0x5c>
		result = num1 * num2; // Умножение
 1dc:	26 9f       	mul	r18, r22
 1de:	c0 01       	movw	r24, r0
 1e0:	11 24       	eor	r1, r1
 1e2:	0e c0       	rjmp	.+28     	; 0x200 <__EEPROM_REGION_LENGTH__>
		} else if (!(PINA & (1 << PA3))) {
 1e4:	cb 99       	sbic	0x19, 3	; 25
 1e6:	07 c0       	rjmp	.+14     	; 0x1f6 <__vector_2+0x6e>
		if (num2 != 0) {
 1e8:	66 23       	and	r22, r22
 1ea:	41 f0       	breq	.+16     	; 0x1fc <__vector_2+0x74>
			result = num1 / num2; // Деление (если делитель не 0)
 1ec:	82 2f       	mov	r24, r18
 1ee:	0e 94 37 01 	call	0x26e	; 0x26e <__udivmodqi4>
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	05 c0       	rjmp	.+10     	; 0x200 <__EEPROM_REGION_LENGTH__>
	buttons = ASK_btns();
	
	// Разделяем число на два 4-битных числа
	unsigned char num1 = (buttons >> 4) & 0x0F; // Первое число (старшие 4 бита)
	unsigned char num2 = buttons & 0x0F;       // Второе число (младшие 4 бита)
	int result = 0;
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <__EEPROM_REGION_LENGTH__>
		result = num1 * num2; // Умножение
		} else if (!(PINA & (1 << PA3))) {
		if (num2 != 0) {
			result = num1 / num2; // Деление (если делитель не 0)
			} else {
			result = 0; // Предотвращаем деление на 0
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	90 e0       	ldi	r25, 0x00	; 0
		}
	}

	// Если результат отрицательный, включаем лампочку (низкий уровень), иначе гасим
	if (result < 0) {
 200:	99 23       	and	r25, r25
 202:	24 f4       	brge	.+8      	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
		PORTD &= ~(1 << LED_NEG); // Включаем лампочку для отрицательных чисел
 204:	22 b3       	in	r18, 0x12	; 18
 206:	2e 7f       	andi	r18, 0xFE	; 254
 208:	22 bb       	out	0x12, r18	; 18
 20a:	03 c0       	rjmp	.+6      	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
		} else {
		PORTD |= (1 << LED_NEG); // Гасим лампочку для положительных чисел
 20c:	22 b3       	in	r18, 0x12	; 18
 20e:	21 60       	ori	r18, 0x01	; 1
 210:	22 bb       	out	0x12, r18	; 18
	}
	
	// Выводим результат на семисегментные индикаторы
	if (result < 0) {
 212:	99 23       	and	r25, r25
 214:	1c f4       	brge	.+6      	; 0x21c <__EEPROM_REGION_LENGTH__+0x1c>
		result = -result; // Преобразуем отрицательное число в положительное
 216:	91 95       	neg	r25
 218:	81 95       	neg	r24
 21a:	91 09       	sbc	r25, r1
	}
	display_number(result);
 21c:	0e 94 88 00 	call	0x110	; 0x110 <display_number>
}
 220:	ff 91       	pop	r31
 222:	ef 91       	pop	r30
 224:	bf 91       	pop	r27
 226:	af 91       	pop	r26
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	7f 91       	pop	r23
 22e:	6f 91       	pop	r22
 230:	5f 91       	pop	r21
 232:	4f 91       	pop	r20
 234:	3f 91       	pop	r19
 236:	2f 91       	pop	r18
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <main>:

// Основная программа
int main(void) {
	SPI_init();
 242:	0e 94 49 00 	call	0x92	; 0x92 <SPI_init>
	init_INT1();
 246:	0e 94 af 00 	call	0x15e	; 0x15e <init_INT1>
	configure_neg_indicator();
 24a:	0e 94 bd 00 	call	0x17a	; 0x17a <configure_neg_indicator>
	
	DDRA &= ~((1 << PA0) | (1 << PA1) | (1 << PA2) | (1 << PA3)); // Кнопки как входы
 24e:	8a b3       	in	r24, 0x1a	; 26
 250:	80 7f       	andi	r24, 0xF0	; 240
 252:	8a bb       	out	0x1a, r24	; 26
	PORTA |= ((1 << PA0) | (1 << PA1) | (1 << PA2) | (1 << PA3)); // Подтяжка для кнопок
 254:	8b b3       	in	r24, 0x1b	; 27
 256:	8f 60       	ori	r24, 0x0F	; 15
 258:	8b bb       	out	0x1b, r24	; 27

	// Инициализация значений перед работой
	buttons = 0;
 25a:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
	display_number(0); // Отображение нуля при старте
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 88 00 	call	0x110	; 0x110 <display_number>
	PORTD |= (1 << LED_NEG); // Гасим лампочку при старте (активный уровень — низкий)
 266:	82 b3       	in	r24, 0x12	; 18
 268:	81 60       	ori	r24, 0x01	; 1
 26a:	82 bb       	out	0x12, r24	; 18
 26c:	ff cf       	rjmp	.-2      	; 0x26c <main+0x2a>

0000026e <__udivmodqi4>:
 26e:	99 1b       	sub	r25, r25
 270:	79 e0       	ldi	r23, 0x09	; 9
 272:	04 c0       	rjmp	.+8      	; 0x27c <__udivmodqi4_ep>

00000274 <__udivmodqi4_loop>:
 274:	99 1f       	adc	r25, r25
 276:	96 17       	cp	r25, r22
 278:	08 f0       	brcs	.+2      	; 0x27c <__udivmodqi4_ep>
 27a:	96 1b       	sub	r25, r22

0000027c <__udivmodqi4_ep>:
 27c:	88 1f       	adc	r24, r24
 27e:	7a 95       	dec	r23
 280:	c9 f7       	brne	.-14     	; 0x274 <__udivmodqi4_loop>
 282:	80 95       	com	r24
 284:	08 95       	ret

00000286 <__divmodhi4>:
 286:	97 fb       	bst	r25, 7
 288:	07 2e       	mov	r0, r23
 28a:	16 f4       	brtc	.+4      	; 0x290 <__divmodhi4+0xa>
 28c:	00 94       	com	r0
 28e:	07 d0       	rcall	.+14     	; 0x29e <__divmodhi4_neg1>
 290:	77 fd       	sbrc	r23, 7
 292:	09 d0       	rcall	.+18     	; 0x2a6 <__divmodhi4_neg2>
 294:	0e 94 57 01 	call	0x2ae	; 0x2ae <__udivmodhi4>
 298:	07 fc       	sbrc	r0, 7
 29a:	05 d0       	rcall	.+10     	; 0x2a6 <__divmodhi4_neg2>
 29c:	3e f4       	brtc	.+14     	; 0x2ac <__divmodhi4_exit>

0000029e <__divmodhi4_neg1>:
 29e:	90 95       	com	r25
 2a0:	81 95       	neg	r24
 2a2:	9f 4f       	sbci	r25, 0xFF	; 255
 2a4:	08 95       	ret

000002a6 <__divmodhi4_neg2>:
 2a6:	70 95       	com	r23
 2a8:	61 95       	neg	r22
 2aa:	7f 4f       	sbci	r23, 0xFF	; 255

000002ac <__divmodhi4_exit>:
 2ac:	08 95       	ret

000002ae <__udivmodhi4>:
 2ae:	aa 1b       	sub	r26, r26
 2b0:	bb 1b       	sub	r27, r27
 2b2:	51 e1       	ldi	r21, 0x11	; 17
 2b4:	07 c0       	rjmp	.+14     	; 0x2c4 <__udivmodhi4_ep>

000002b6 <__udivmodhi4_loop>:
 2b6:	aa 1f       	adc	r26, r26
 2b8:	bb 1f       	adc	r27, r27
 2ba:	a6 17       	cp	r26, r22
 2bc:	b7 07       	cpc	r27, r23
 2be:	10 f0       	brcs	.+4      	; 0x2c4 <__udivmodhi4_ep>
 2c0:	a6 1b       	sub	r26, r22
 2c2:	b7 0b       	sbc	r27, r23

000002c4 <__udivmodhi4_ep>:
 2c4:	88 1f       	adc	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	5a 95       	dec	r21
 2ca:	a9 f7       	brne	.-22     	; 0x2b6 <__udivmodhi4_loop>
 2cc:	80 95       	com	r24
 2ce:	90 95       	com	r25
 2d0:	bc 01       	movw	r22, r24
 2d2:	cd 01       	movw	r24, r26
 2d4:	08 95       	ret

000002d6 <_exit>:
 2d6:	f8 94       	cli

000002d8 <__stop_program>:
 2d8:	ff cf       	rjmp	.-2      	; 0x2d8 <__stop_program>
