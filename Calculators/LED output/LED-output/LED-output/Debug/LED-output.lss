
LED-output.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000218  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006be  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005f4  00000000  00000000  0000098a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f0  00000000  00000000  00000f7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00001270  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000033f  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000154  00000000  00000000  0000166b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000017bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  74:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <SPI_init>:

unsigned char buttons;

void SPI_init()
{
	DDRB|=(7<<0)|(1<<4);  /* Управление линиями выбора микросхем */
  7c:	87 b3       	in	r24, 0x17	; 23
  7e:	87 61       	ori	r24, 0x17	; 23
  80:	87 bb       	out	0x17, r24	; 23
	DDRB|=(1<<5)|(1<<7);  /* Управление линиями SPI */
  82:	87 b3       	in	r24, 0x17	; 23
  84:	80 6a       	ori	r24, 0xA0	; 160
  86:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  88:	81 e5       	ldi	r24, 0x51	; 81
  8a:	8d b9       	out	0x0d, r24	; 13
  8c:	08 95       	ret

0000008e <SPI_WR>:
}

unsigned char SPI_WR(unsigned char data)
{
	SPDR = data;
  8e:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF))) {} // Ожидаем окончания передачи
  90:	77 9b       	sbis	0x0e, 7	; 14
  92:	fe cf       	rjmp	.-4      	; 0x90 <SPI_WR+0x2>
	return SPDR;// Читаем данные после завершения передачи
  94:	8f b1       	in	r24, 0x0f	; 15
}
  96:	08 95       	ret

00000098 <ASK_btns>:

unsigned char ASK_btns(void)
{
	SENRES;
  98:	88 b3       	in	r24, 0x18	; 24
  9a:	8f 7e       	andi	r24, 0xEF	; 239
  9c:	88 bb       	out	0x18, r24	; 24
	SENSET;
  9e:	88 b3       	in	r24, 0x18	; 24
  a0:	80 61       	ori	r24, 0x10	; 16
  a2:	88 bb       	out	0x18, r24	; 24
	return SPI_WR(0);
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	0e 94 47 00 	call	0x8e	; 0x8e <SPI_WR>
}
  aa:	08 95       	ret

000000ac <init_INT1>:

void init_INT1(void) {
	DDRD &= ~(1<<PIN_INT1);  // Настроим вывод на вход
  ac:	81 b3       	in	r24, 0x11	; 17
  ae:	87 7f       	andi	r24, 0xF7	; 247
  b0:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<PIN_INT1);   // Включаем подтягивающий резистор
  b2:	82 b3       	in	r24, 0x12	; 18
  b4:	88 60       	ori	r24, 0x08	; 8
  b6:	82 bb       	out	0x12, r24	; 18
	GICR |= (1<<INT1);        // Разрешаем внешнее прерывание на INT1
  b8:	8b b7       	in	r24, 0x3b	; 59
  ba:	80 68       	ori	r24, 0x80	; 128
  bc:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1<<ISC01) | (0<<ISC00);  // Настроим условие прерывания
  be:	85 b7       	in	r24, 0x35	; 53
  c0:	82 60       	ori	r24, 0x02	; 2
  c2:	85 bf       	out	0x35, r24	; 53
	sei();  // Включаем глобальные прерывания
  c4:	78 94       	sei
  c6:	08 95       	ret

000000c8 <__vector_2>:
}

ISR(INT1_vect) {
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	3f 93       	push	r19
  d6:	4f 93       	push	r20
  d8:	5f 93       	push	r21
  da:	6f 93       	push	r22
  dc:	7f 93       	push	r23
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
  e2:	af 93       	push	r26
  e4:	bf 93       	push	r27
  e6:	ef 93       	push	r30
  e8:	ff 93       	push	r31
	buttons = ASK_btns();
  ea:	0e 94 4c 00 	call	0x98	; 0x98 <ASK_btns>
  ee:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	// Разделяем число на два 4-битных числа
	unsigned char num1 = (buttons >> 4) & 0x0F;  // Первое число (старшие 4 бита)
  f2:	28 2f       	mov	r18, r24
  f4:	22 95       	swap	r18
  f6:	2f 70       	andi	r18, 0x0F	; 15
	unsigned char num2 = buttons & 0x0F;         // Второе число (младшие 4 бита)
  f8:	68 2f       	mov	r22, r24
  fa:	6f 70       	andi	r22, 0x0F	; 15
	int result = 0;
	
	// Выполнение математической операции в зависимости от нажатой кнопки
	if (!(PINA & (1 << PA0))) {
  fc:	c8 99       	sbic	0x19, 0	; 25
  fe:	05 c0       	rjmp	.+10     	; 0x10a <__vector_2+0x42>
		result = num1 + num2;  // Сложение
 100:	86 2f       	mov	r24, r22
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	82 0f       	add	r24, r18
 106:	91 1d       	adc	r25, r1
 108:	1a c0       	rjmp	.+52     	; 0x13e <__vector_2+0x76>
		} else if (!(PINA & (1 << PA1))) {
 10a:	c9 99       	sbic	0x19, 1	; 25
 10c:	05 c0       	rjmp	.+10     	; 0x118 <__vector_2+0x50>
		result = num1 - num2;  // Вычитание
 10e:	82 2f       	mov	r24, r18
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	86 1b       	sub	r24, r22
 114:	91 09       	sbc	r25, r1
 116:	13 c0       	rjmp	.+38     	; 0x13e <__vector_2+0x76>
		} else if (!(PINA & (1 << PA2))) {
 118:	ca 99       	sbic	0x19, 2	; 25
 11a:	04 c0       	rjmp	.+8      	; 0x124 <__vector_2+0x5c>
		result = num1 * num2;  // Умножение
 11c:	26 9f       	mul	r18, r22
 11e:	c0 01       	movw	r24, r0
 120:	11 24       	eor	r1, r1
 122:	0d c0       	rjmp	.+26     	; 0x13e <__vector_2+0x76>
		} else if (!(PINA & (1 << PA3))) {
 124:	cb 99       	sbic	0x19, 3	; 25
 126:	06 c0       	rjmp	.+12     	; 0x134 <__vector_2+0x6c>
		if (num2 != 0) {
 128:	66 23       	and	r22, r22
 12a:	39 f0       	breq	.+14     	; 0x13a <__vector_2+0x72>
			result = num1 / num2;  // Деление (если делитель не 0)
 12c:	82 2f       	mov	r24, r18
 12e:	0e 94 c4 00 	call	0x188	; 0x188 <__udivmodqi4>
 132:	05 c0       	rjmp	.+10     	; 0x13e <__vector_2+0x76>
	buttons = ASK_btns();
	
	// Разделяем число на два 4-битных числа
	unsigned char num1 = (buttons >> 4) & 0x0F;  // Первое число (старшие 4 бита)
	unsigned char num2 = buttons & 0x0F;         // Второе число (младшие 4 бита)
	int result = 0;
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <__vector_2+0x76>
		result = num1 * num2;  // Умножение
		} else if (!(PINA & (1 << PA3))) {
		if (num2 != 0) {
			result = num1 / num2;  // Деление (если делитель не 0)
			} else {
			result = 0;  // Предотвращаем деление на 0
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
		}
	}

	// Выводим результат на порт C (в двоичном виде)
	PORTC = ~result;  // Инвертируем сигнал перед выводом на порт C
 13e:	80 95       	com	r24
 140:	85 bb       	out	0x15, r24	; 21
}
 142:	ff 91       	pop	r31
 144:	ef 91       	pop	r30
 146:	bf 91       	pop	r27
 148:	af 91       	pop	r26
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	7f 91       	pop	r23
 150:	6f 91       	pop	r22
 152:	5f 91       	pop	r21
 154:	4f 91       	pop	r20
 156:	3f 91       	pop	r19
 158:	2f 91       	pop	r18
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <main>:


int main(void) {
	SPI_init();
 164:	0e 94 3e 00 	call	0x7c	; 0x7c <SPI_init>
	
	DDRC = 0xFF;  // Настроим порт C как выход
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	84 bb       	out	0x14, r24	; 20
	init_INT1();  // Инициализация INT1
 16c:	0e 94 56 00 	call	0xac	; 0xac <init_INT1>
	
	DDRA &= ~((1 << PA0) | (1 << PA1) | (1 << PA2) | (1 << PA3)); // Кнопки как входы
 170:	8a b3       	in	r24, 0x1a	; 26
 172:	80 7f       	andi	r24, 0xF0	; 240
 174:	8a bb       	out	0x1a, r24	; 26
	PORTA |= ((1 << PA0) | (1 << PA1) | (1 << PA2) | (1 << PA3)); // Подтяжка для кнопок
 176:	8b b3       	in	r24, 0x1b	; 27
 178:	8f 60       	ori	r24, 0x0F	; 15
 17a:	8b bb       	out	0x1b, r24	; 27

	// Инициализация значений перед работой
	buttons = 0;
 17c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	PORTD |= (1 << LED_NEG);  // Гасим лампочку при старте (активный уровень — низкий)
 180:	82 b3       	in	r24, 0x12	; 18
 182:	81 60       	ori	r24, 0x01	; 1
 184:	82 bb       	out	0x12, r24	; 18
 186:	ff cf       	rjmp	.-2      	; 0x186 <main+0x22>

00000188 <__udivmodqi4>:
 188:	99 1b       	sub	r25, r25
 18a:	79 e0       	ldi	r23, 0x09	; 9
 18c:	04 c0       	rjmp	.+8      	; 0x196 <__udivmodqi4_ep>

0000018e <__udivmodqi4_loop>:
 18e:	99 1f       	adc	r25, r25
 190:	96 17       	cp	r25, r22
 192:	08 f0       	brcs	.+2      	; 0x196 <__udivmodqi4_ep>
 194:	96 1b       	sub	r25, r22

00000196 <__udivmodqi4_ep>:
 196:	88 1f       	adc	r24, r24
 198:	7a 95       	dec	r23
 19a:	c9 f7       	brne	.-14     	; 0x18e <__udivmodqi4_loop>
 19c:	80 95       	com	r24
 19e:	08 95       	ret

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
